// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id          String  @id @default(uuid()) @db.Uuid
  code        String  @unique
  name        String
  description String? @db.Text
  owner_id    String  @db.Uuid

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  owner  Owner   @relation(fields: [owner_id], references: [id])
  stores Store[]

  @@unique([code, owner_id])
  @@map("companies")
}

model Store {
  id             String   @id @default(uuid()) @db.Uuid
  code           String
  name           String
  npwp           String
  open_date      DateTime @db.Date
  address        String   @db.Text
  longitude      Decimal  @db.Decimal(65, 20)
  latitude       Decimal  @db.Decimal(65, 20)
  description    String?  @db.Text
  is_active      Boolean  @default(true)
  wa_number      String?
  is_flex_price  Boolean  @default(false)
  is_float_price Boolean  @default(false)
  tax_percentage Decimal  @default(11) @db.Decimal // ppn jual / tax sales
  tax_purchase   Decimal  @default(0) @db.Decimal // ppn beli emas
  poin_config    Int      @default(0)
  logo           String
  grace_period   Int      @default(0) // Days
  // TT (store > customer)
  percent_tt_adjustment Decimal @default(0) @db.Decimal
  fixed_tt_adjustment  Decimal @default(0) @db.Decimal
  // KBL (store < customer)
  percent_kbl_adjustment Decimal @default(0) @db.Decimal
  fixed_kbl_adjustment  Decimal @default(0) @db.Decimal

  company_id String @db.Uuid

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  company Company @relation(fields: [company_id], references: [id])

  @@unique([code, company_id])
  @@map("stores")
}

model Owner {
  id       String @id @default(uuid()) @db.Uuid
  name     String
  email    String
  password String

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  companies Company[]
  employees Employee[]

  @@unique([email])
  @@map("owners")
}

model Employee {
  id       String @id @default(uuid()) @db.Uuid
  name     String
  email    String
  password String
  owner_id String @db.Uuid

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  owner Owner @relation(fields: [owner_id], references: [id])

  @@unique([email])
  @@map("employees")
}

model ActionLog {
  id          BigInt  @id @default(autoincrement())
  user_id     String?  @db.Uuid
  event       String
  resource    String
  resource_id String
  diff        Json?
  timestamp   DateTime @default(now())

  @@map("action_logs")
  @@index([user_id])
  @@index([resource, resource_id])
}
